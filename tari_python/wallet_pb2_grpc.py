# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tari_python.wallet_pb2 as wallet__pb2


class WalletStub(object):
    """The gRPC interface for interacting with the wallet.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVersion = channel.unary_unary(
                '/tari.rpc.Wallet/GetVersion',
                request_serializer=wallet__pb2.GetVersionRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetVersionResponse.FromString,
                )
        self.Identify = channel.unary_unary(
                '/tari.rpc.Wallet/Identify',
                request_serializer=wallet__pb2.GetIdentityRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetIdentityResponse.FromString,
                )
        self.GetCoinbase = channel.unary_unary(
                '/tari.rpc.Wallet/GetCoinbase',
                request_serializer=wallet__pb2.GetCoinbaseRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetCoinbaseResponse.FromString,
                )
        self.Transfer = channel.unary_unary(
                '/tari.rpc.Wallet/Transfer',
                request_serializer=wallet__pb2.TransferRequest.SerializeToString,
                response_deserializer=wallet__pb2.TransferResponse.FromString,
                )
        self.GetTransactionInfo = channel.unary_unary(
                '/tari.rpc.Wallet/GetTransactionInfo',
                request_serializer=wallet__pb2.GetTransactionInfoRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetTransactionInfoResponse.FromString,
                )
        self.GetCompletedTransactions = channel.unary_stream(
                '/tari.rpc.Wallet/GetCompletedTransactions',
                request_serializer=wallet__pb2.GetCompletedTransactionsRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetCompletedTransactionsResponse.FromString,
                )
        self.GetBalance = channel.unary_unary(
                '/tari.rpc.Wallet/GetBalance',
                request_serializer=wallet__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=wallet__pb2.GetBalanceResponse.FromString,
                )
        self.CoinSplit = channel.unary_unary(
                '/tari.rpc.Wallet/CoinSplit',
                request_serializer=wallet__pb2.CoinSplitRequest.SerializeToString,
                response_deserializer=wallet__pb2.CoinSplitResponse.FromString,
                )


class WalletServicer(object):
    """The gRPC interface for interacting with the wallet.
    """

    def GetVersion(self, request, context):
        """This returns the current version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identify(self, request, context):
        """This returns the identity information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoinbase(self, request, context):
        """This returns a coinbase transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Send Tari to a number of recipients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionInfo(self, request, context):
        """Returns the transaction details for the given transaction IDs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompletedTransactions(self, request, context):
        """Returns all transactions' details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Returns the balance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoinSplit(self, request, context):
        """Request the wallet perform a coinsplit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=wallet__pb2.GetVersionRequest.FromString,
                    response_serializer=wallet__pb2.GetVersionResponse.SerializeToString,
            ),
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=wallet__pb2.GetIdentityRequest.FromString,
                    response_serializer=wallet__pb2.GetIdentityResponse.SerializeToString,
            ),
            'GetCoinbase': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoinbase,
                    request_deserializer=wallet__pb2.GetCoinbaseRequest.FromString,
                    response_serializer=wallet__pb2.GetCoinbaseResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=wallet__pb2.TransferRequest.FromString,
                    response_serializer=wallet__pb2.TransferResponse.SerializeToString,
            ),
            'GetTransactionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionInfo,
                    request_deserializer=wallet__pb2.GetTransactionInfoRequest.FromString,
                    response_serializer=wallet__pb2.GetTransactionInfoResponse.SerializeToString,
            ),
            'GetCompletedTransactions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompletedTransactions,
                    request_deserializer=wallet__pb2.GetCompletedTransactionsRequest.FromString,
                    response_serializer=wallet__pb2.GetCompletedTransactionsResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=wallet__pb2.GetBalanceRequest.FromString,
                    response_serializer=wallet__pb2.GetBalanceResponse.SerializeToString,
            ),
            'CoinSplit': grpc.unary_unary_rpc_method_handler(
                    servicer.CoinSplit,
                    request_deserializer=wallet__pb2.CoinSplitRequest.FromString,
                    response_serializer=wallet__pb2.CoinSplitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tari.rpc.Wallet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Wallet(object):
    """The gRPC interface for interacting with the wallet.
    """

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/GetVersion',
            wallet__pb2.GetVersionRequest.SerializeToString,
            wallet__pb2.GetVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/Identify',
            wallet__pb2.GetIdentityRequest.SerializeToString,
            wallet__pb2.GetIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCoinbase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/GetCoinbase',
            wallet__pb2.GetCoinbaseRequest.SerializeToString,
            wallet__pb2.GetCoinbaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/Transfer',
            wallet__pb2.TransferRequest.SerializeToString,
            wallet__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/GetTransactionInfo',
            wallet__pb2.GetTransactionInfoRequest.SerializeToString,
            wallet__pb2.GetTransactionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompletedTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tari.rpc.Wallet/GetCompletedTransactions',
            wallet__pb2.GetCompletedTransactionsRequest.SerializeToString,
            wallet__pb2.GetCompletedTransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/GetBalance',
            wallet__pb2.GetBalanceRequest.SerializeToString,
            wallet__pb2.GetBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CoinSplit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tari.rpc.Wallet/CoinSplit',
            wallet__pb2.CoinSplitRequest.SerializeToString,
            wallet__pb2.CoinSplitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
